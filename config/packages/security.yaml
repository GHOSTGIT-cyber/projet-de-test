security:
    password_hashers:
        App\Entity\User:
            algorithm: auto
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username 
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\UserAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            #custom_authenticator: App\Security\UserAuthenticator

            #logout:
                #path: app_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    
    access_control:
    # La page de login est publique
    - { path: ^/login, roles: PUBLIC_ACCESS }

     # La page de réinitialisation de mot de passe doit aussi être publique !
    - { path: ^/forgot-password, roles: PUBLIC_ACCESS }

    # (Si tu as aussi une page reset-password publique)
    - { path: ^/reset-password, roles: PUBLIC_ACCESS }

    # Dashboard admin et toutes les pages admin
    - { path: ^/admin, roles: ROLE_ADMIN }

    # Dashboard formateur et toutes les pages formateur
    - { path: ^/formateur, roles: ROLE_FORMATEUR }

    # Dashboard apprenant et toutes les pages apprenant
    - { path: ^/apprenant, roles: ROLE_APPRENANT }

    # Par défaut, toute autre URL nécessite une connexion
    - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
        

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
